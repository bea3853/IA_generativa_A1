# -*- coding: utf-8 -*-
"""aula1_inteligencia_artificial

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mKsdnC1FErnQqmpm3S0Gw2iAS9VUD7O-
"""

import numpy as np
import pandas as pd
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder

# objetivo criar um modelo de rede neural simples para prever se uma pessoa é obesa ou não com base em um conjunto de Dados
#coloquei poucas epocas para carregar rapido


#dados
data = pd.DataFrame({
    'Idade': [25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 21, 18, 23],
    'Peso': [70, 80, 85, 90, 95, 100, 110, 120, 125, 130, 140, 200,350,450],
    'Obesidade': ['Não', 'Não', 'Não', 'Não', 'Sim', 'Sim', 'Sim', 'Sim', 'Sim', 'Sim', 'Sim', 'Sim', 'Sim', 'Sim']
})

# processamento dos dados
x = data[['Idade', 'Peso']]
y = data['Obesidade']

label_encoder = LabelEncoder()
y = label_encoder.fit_transform(y)

x_train, x_val, y_train, y_val = train_test_split(x, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
x_train = scaler.fit_transform(x_train)
x_val = scaler.transform(x_val)

#  modelo
model = tf.keras.Sequential([
    tf.keras.layers.Dense(8, activation='relu', input_shape=(2,)),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Treinar
model.fit(x_train, y_train, epochs=5, batch_size=2, validation_data=(x_val, y_val))

#validação
val_loss, val_acc = model.evaluate(x_val, y_val)
print(f'Acurácia no conjunto de validação: {val_acc}')

#previsões
predictions = model.predict(x_val)
predictions_binary = np.round(predictions)

# Exibir as previsões
print("\nPrevisões -  quantidade:")
print(predictions_binary)